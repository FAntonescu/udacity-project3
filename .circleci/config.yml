version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
      id:
        type: string
    steps:
      - run:
          name: Destroy backend environment
          when: on_fail
          command: |
            # Your code here
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
      - run:
          name: Destroy frontend environment
          when: on_fail
          command: |
            # Your code here
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          working_directory: ./frontend
          command: |
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          working_directory: ./backend
          command: |
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules, backend/dist]
          key: backend-build
      - store_artifacts:
          path: backend/dist

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout # Checkout code from git
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test-frontend
          working_directory: ./frontend
          command: npm install test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout # Checkout code from git
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test-backend
          working_directory: ./backend
          command: npm test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout # Checkout code from git
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan-frontend
          working_directory: ./frontend
          command: npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout # Checkout code from git
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan-backend
          working_directory: ./backend
          command: npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli:2.1.16
    steps:
      - checkout # Checkout code from git
      - run:
          name: Install utilities tar and gzip
          command: |
            yum install -y tar gzip 
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project="udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Programmatically save the new back-end url to MemStash.io
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo "BACKEND IP: ${BACKEND_IP}"
            curl -H "Content-Type: text/plain" -H "token: ${MEMSTASH_TOKEN}" --request PUT --data "http://$BACKEND_IP:3030" https://api.memstash.io/values/udapeople-backend-url
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project="udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo "BACKEND IP: ${BACKEND_IP}"
            echo "${BACKEND_IP}" >> inventory.txt
            cat inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      
      #- destroy-environment:
      #    id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.9-alpine
    steps:
      - checkout # Checkout code from git
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["31:ba:95:73:af:5d:f4:40:fa:aa:64:1d:05:25:a4:59"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            # Your code here
            pwd
            ls -l
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure      
      #- destroy-environment:
      #    id: ${CIRCLE_WORKFLOW_ID:0:7}
  check-postgres-connectivity:
    docker:
      - image: postgres:12.5
    steps:
      - run:
          name: Check connectivity to Postgres 
          command: | 
            echo "check connectivity to Postgres using hostname: ${TYPEORM_HOST} on port ${TYPEORM_PORT}"
            export PGPASSWORD=${TYPEORM_PASSWORD}
            psql -U postgres -h ${TYPEORM_HOST} --list
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout # Checkout code from git
      # Restore backend from cache
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            # Your code here
            npm run migrations > migration_status
      - run:
          name: Send migration results to memstash
          working_directory: ./backend
          command: |
            # Your code here
            if [[ $(grep -q "has been executed successfully" migration_status) -eq 0 ]];             
            then
              echo "run-migration has been executed successfully, sending 'ok' to Memstash udapeople-migration_${CIRCLE_WORKFLOW_ID}"; 
              curl -H "Content-Type: text/plain" -H "token: ${MEMSTASH_TOKEN}" --request PUT --data "ok" https://api.memstash.io/values/udapeople-migration_${CIRCLE_WORKFLOW_ID}
            else 
              cat migration_status
              echo "run-migration failed, sending 'fail' to Memstash udapeople-migration_${CIRCLE_WORKFLOW_ID}"; 
              curl -H "Content-Type: text/plain" -H "token: ${MEMSTASH_TOKEN}" --request PUT --data "fail" https://api.memstash.io/values/udapeople-migration_${CIRCLE_WORKFLOW_ID}
            fi
     # Here's where you will add some code to rollback on failure      
     #- destroy-environment:
     #    id: ${CIRCLE_WORKFLOW_ID:0:7}
  rebuild-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build front-end
          working_directory: ./frontend
          command: |
            export API_URL=$(curl -H "token: ${MEMSTASH_TOKEN}" --request GET https://api.memstash.io/values/udapeople-backend-url)
            echo "${API_URL}"
            npm install
            npm run build
      - save_cache:
          paths: [frontend/dist]
          key: frontend-dist
  deploy-frontend:
    docker:
      - image: amazon/aws-cli:2.1.16
    steps:
      - checkout # Checkout code from git
      - run:
          name: Install utilities tar and gzip
          command: |
            yum install -y tar gzip 
      - restore_cache:
          keys: [frontend-dist]
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            ls -l /home/circleci/project/frontend/dist
            aws s3 cp /home/circleci/project/frontend/dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      - image: python:3.9-alpine
    steps:
      - checkout # Checkout code from git
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["31:ba:95:73:af:5d:f4:40:fa:aa:64:1d:05:25:a4:59"]
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Deploy backend
          working_directory: ./.circleci/ansible
          command: |
            # your code here
            pwd
            ls -l
            cat inventory.txt            
            #ansible-playbook -v -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
            exit 1
      - run:
          name: Get backend url
          command: |
            # your code here
            exit 1
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            exit 1
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            exit 1
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      - image: amazon/aws-cli:2.1.16
    steps:
      - checkout # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
            exit 1
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            exit 1
      # Here's where you will add some code to rollback on failure  

  cleanup:
    docker:
      - image: amazon/aws-cli:2.1.16
    steps:
      - checkout # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            

workflows:
  default:
    jobs:
#      - build-frontend
      - build-backend
#      - test-frontend:
#          requires: [build-frontend]
#      - test-backend:
#          requires: [build-backend]
#      - scan-backend:
#          requires: [build-backend]
#      - scan-frontend:
#          requires: [build-frontend]
#      - deploy-infrastructure:
#          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#          filters:
#            branches:
#              only: [test-feature-branch]
#      - configure-infrastructure:
#          requires: [deploy-infrastructure]
#      - check-postgres-connectivity:
#          requires: [deploy-infrastructure]
#      - run-migrations:
#          requires: [configure-infrastructure]
#      - rebuild-frontend:
#          requires: [run-migrations]
#      - deploy-frontend:
#          requires: [rebuild-frontend]
      - deploy-backend:
#          requires: [run-migrations]
          requires: [build-backend]
#      - smoke-test:
#          requires: [deploy-backend, deploy-frontend]
#      - cloudfront-update:
#          requires: [smoke-test]
#      - cleanup:
#          requires: [cloudfront-update]